1. Architecture Design Decisions

1.1. Location API

 Frontend facing module that is responsible for handling Person data and services.
 It provides a REST API capable of simple interactions based on HTTP protocol. In addition, it relies on Kafka-based
 messaging producer/consumer services for new entities, avoiding locking clients while persisting them in the database.

 It also provides to the frontend access to the geolocation feature by communication via gRPC with ConnectionData API,
 achieving better performance with small serialized protobuf messages.

1.2. Location API

 Frontend facing module that is responsible for handling Location data and services.
 Similar to Person API, the Location API handles frontend interaction with REST-based communication and the Location
 entities persistence are made through Kafka-based messaging.

1.3. ConnectionData API

 Internal API that provides geolocation capabilities to the MVP. It is based on gRPC and the following were considered
 in this decision:

 * No browser support is needed
 * Fast serialization
 * Small message payload - mainly binary communication through HTTP 2
 * Native message strict contracts - .proto files describe a well formed message

1.4. Other Aspects

 * Microservices are using a shared database pattern.
 * Python version updated to 3.9-alpine